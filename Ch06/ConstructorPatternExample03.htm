<!DOCTYPE html>
<html>
<head>
    <title>Constructor Pattern Example 3</title>
    <script type="text/javascript">
    
        function Person(name, age, job){
            this.name = name;
            this.age = age;
            this.job = job;
            // 指向函数的指针
            this.sayName = sayName;
        }

        //  把sayName()函数移到构造函数外，就变成全局作用域函数。 这样两个对象就共享了同一个sayName()函数
        //     新问题：
        //         1. 全局函数只能被某个对象调用，不符合全局作用域定义
        // 如果需要定义很多方法就要很多全局函数，破坏封装性
        function sayName(){
            alert(this.name);
        }
        
        var person1 = new Person("Nicholas", 29, "Software Engineer");
        var person2 = new Person("Greg", 27, "Doctor");
        
        person1.sayName();   //"Nicholas"
        person2.sayName();   //"Greg"
        
        alert(person1 instanceof Object);  //true
        alert(person1 instanceof Person);  //true
        alert(person2 instanceof Object);  //true
        alert(person2 instanceof Person);  //true
        
        alert(person1.constructor == Person);  //true
        alert(person2.constructor == Person);  //true
        
        // 这样两个对象就共享了同一个sayName()函数
        alert(person1.sayName == person2.sayName);  //true        
        
        
    </script>
</head>
<body>

    <center>
  <div style="font-size:15px; font-weight:bold; text-align:center; line-height:25px;">
     Ô´ÂëÓÉ<a href="http://www.jq-school.com" target="_blank" style="color:#000">JquerySchool</a>ÍøÕ¾ÕûÀí£¨<a href="http://www.jq-school.com" target="_blank">http://www.jq-school.com</a>£©Ñ§Ï°½»Á÷QQÈº<a target="_blank" href="http://wp.qq.com/wpa/qunwpa?idkey=f221dd676cd5f7f51f6b580ff8fe1bdd2fefe911ae0e1137a6f79c58d6e11ebf"><img border="0" src="http://pub.idqqimg.com/wpa/images/group.png" alt="JqueryÑ§ÌÃQQ¢àÈº" title="JqueryÑ§ÌÃQQ¢àÈº"></a></div>
</center>
</body>
</html>